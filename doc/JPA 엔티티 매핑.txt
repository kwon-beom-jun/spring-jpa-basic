
목차
    1. 객체와 테이블 매핑
    2. 데이터베이스 스키마 자동 생성
    3. 필드와 컬럼 매핑
    4. 기본 키 매핑


엔티티 매핑 소개
    - 객체와 테이블 매핑 : @Entity, @Table
    - 필드와 컬럼 매핑 : @Column
    - 기본 키 매핑 : @Id
    - 연관관계 매핑 : @ManyToOne, @JoinColumn



1. 객체와 테이블 매핑
        @Entity
            @Entity가 붙은 클래스는 JPA가 관리, 엔티티라 한다.
            JPA를 사용해서 테이블과 매핑할 클래스는 @Entity 필수
            • 주의
                - 기본 생성자 필수(파라미터가 없는 public 또는 protected 생성자)
                    JPA를 구현해서 사용되는 라이브러리들이 리플렉션이나 다양한 기술들을 써서 객체를
                    프록시하는 등 여러가지로 기본 생성자를 사용하기 때문에 스펙상 생성하도록 해두었음
                - final 클래스, enum, interface, inner 클래스 사용X
                - 저장할 필드에 final 사용 X

            속성 정리
                name 속성 (별로 중요 X)
                    디폴트 값은 클래스 이름을 그대로 사용
                    JPA에서 사용할 엔티티 이름을 지정
                    사용하면 헷갈리므로 같은 클래스 이름이 없으면 가급적 기본값을 사용

        @Table
            @Table은 엔티티와 매핑할 DB 테이블 지정
                예시) 엔티티 Member와 DB 테이블 MBR과 맵핑
                    @Entity
                    @Table(name = "MBR")
                    public class Member(){}

            속성 정리
                name : 매핑할 테이블 이름 (디폴트 : 엔티티 이름을 사용)
                catalog : 데이터베이스 catalog 매핑
                schema : 데이터베이스 schema 매핑
                uniqueConstraints(DDL) : DDL 생성 시에 유니크 제약 조건 생성



2. 데이터베이스 스키마 자동 생성 ( persistence.xml )
    - DDL을 애플리케이션 실행 시점에 자동 생성
    - 테이블 중심 -> 객체 중심
    - 데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL 생성
    - 이렇게 생성된 DDL은 개발 장비에서만 사용
    - 생성된 DDL은 운영서버에서는 사용하지 않거나, 적절히 다듬은 후 사용

    속성 정리
        hibernate.hbm2ddl.auto 옵션
            create : 기존테이블 삭제 후 다시 생성 (DROP + CREATE)
                예시) <property name="hibernate.hbm2ddl.auto" value="create"/>
            create-drop : create와 같으나 종료시점에 테이블 DROP
            update : 변경분만 반영(운영DB에는 사용하면 안됨)
                ex) 기존 MEMBER DB 테이블에 id, name만 존재하는데 매핑되는 Member Entity에 age 필드를
                    추가하여 실행하면 alter table해서 기존 테이블에 age를 추가해줌
                ※ 반대로 기존 Member DB 테이블에 age 컬럼이 있고 Entity에 age 필드가 없는 상태로 구동하면
                   아무일도 일어나지 않음 (만약 DB Member age 컬럼이 not null 이면 insert 하다가 에러발생)
            validate : 엔티티와 테이블이 정상 매핑되었는지만 확인
                ex) Entity에 DB에 매핑되는 컬럼이 없으면 에러발생 (update는 DB에 컬럼이 없어도 에러가 발생하지 않음)
            none : 사용하지 않음 (주석도 가능), 사실상 없는 속성값이고 아무거나 넣는거랑 같은것
                ex) none을 넣어도 되고 abcabc 이런식으로 아무거나 넣어도 가능하지만 관례상 none을 넣음

        방언에 따라서 적절한 데이터베이스에 맞게 해석
            ex) <property name="hibernate.dialect" value="org.hibernate.dialect.Oracle12cDialect"/> 이고,
                <property name="hibernate.hbm2ddl.auto" value="create"/> 일때,
                Oracle String의 기본 컬럼 타입은 varchar2여서 varchar2로 생성됨

    ※ 운용 장비에는 절대로 create, create-drop, update를 사용하면 안됨!!!
      (근본적으로 맵 어플리케이션 계정은 alter나 drop을 못하도록 계정 자체를 분리하는게 맞음)
        개발 초기 로컬 : create, update
        테스트와 개발 서버 : update, validate (강사님은 테스트, 개발 서버에서도 가급적 사용하는거 권장하지 않음)
            - 데이터가 몇 천만건 있는 상태에서 alter을 잘못 치거나 하면 시스템이 중단 상태가 될 수도 있음,
              애플리케이션 로딩 시점에 시스템이 자동으로 alter을 쳐준다는것은 굉장히 위험
              → 그래서 직접 만든 스크립트를 테스트 db에다가 직접 테스트해서 반영해보고 DBA분에게 전달하거나
                검수받고 적용하는것을 권장
        스테이징과 운영 서버 : validate, none

    ※ TIP
        JPA가 만들어주는 Script(콘솔 로그 스크립트)를 활용하여 다듬어서(회사 룰이 있다면 회사 룰에 맞춰서)
        꼼꼼히 확인 후 사용


    DDL 생성 기능
        JPA가 실행될 떄 어노테이션을 보고 런타임이 바뀌지는 않음,
        애플리케이션 실행 자체에 영향을 주지 않고 데이터베이스에 영향을 주는것으로 DDL 생성해주는것만 도와주는 역할
        JPA의 어떤 실행 매커니즘 자체에 영향을 주지는 않음
        ↔ @Table(name = "MBR") 이런 테이블 명을 변경하는것은 런타임에 영향(insert, update 쿼리 등)을 줌

        - 제약조건 추가
            lenth는 ddl 생성 기능인데 약간 validation 하는 경우도 있음
            ex) 회원 이름은 필수, 10자 초과 X
                @Column(nullable = false, length = 10)
                private userName;

        - 유니크 제약조건 추가
            @Table(uniqueConstraints =
                {@UniqueConstraint( name = "NAME_AGE_UNIQUE", columnNames = {"NAME", "AGE"} )})

        - DDL 생성 기능은 DDL을 자동 생성할 때만 사용되고, JPA의 실행 로직에는 영향을 주지 않는다



3. 필드와 컬럼 매핑

    요구사항 추가 ( JpaFldColMain.class )
        1. 회원은 일반 회원과 관리자로 구분해야 한다.
        2. 회원 가입일과 수정일이 있어야 한다.
        3. 회원을 설명할 수 있는 필드가 있어야 한다. 이 필드는 길이 제한이 없다

        @Column : 컬럼 매핑
        @Temporal : 날짜 타입 매핑
        @Enumerated : enum 타입 매핑
        @Lob : BLOB, CLOB 매핑
        @Transient : 특정 필드를 컬럼에 매핑하지 않음(매핑 무시)


        @Column
            name : 필드와 매핑할 테이블의 컬럼 이름 (default : 객체의 필드 이름)
            insertable, updatable : 등록, 변경 가능 여부 (default : TRUE)
                                    해당 컬럼을 수정했을때 DB에 insert, update를 반영할건지 여부
            nullable(DDL) : null 값의 허용 여부를 설정한다. false로 설정하면 DDL 생성 시에 not null 제약조건이 붙는다.
            unique(DDL) : @Table의 uniqueConstraints와 같지만 한 컬럼에 간단히 유니크 제약조건을 걸 때 사용한다.
                          잘 사용하지 않음 (이름이 랜덤으로 지정되어 운영에서 이름이 명시적이지 못해 잘 사용하지 않음)
                            → 클래스 @Table에 유니크 제약조건 "uniqueConstraints"를 줄 수 있고 이름도 지정 가능
            columnDefinition(DDL) : 데이터베이스 컬럼 정보를 직접 줄 수 있다.
                                    (default : 필드의 자바 타입과 방언 정보를 사용해서 적절한 컬럼 타입)
                                    ex) varchar(100) default ‘EMPTY'
            length(DDL) : 문자 길이 제약조건, String 타입에만 사용한다. (default : 255)
            precision, scale(DDL) :  BigDecimal 타입에서 사용한다(BigInteger도 사용할 수 있다).
                                     precision은 소수점을 포함한 전체 자 릿수를, scale은 소수의 자릿수
                                     다. 참고로 double, float 타입에는 적용되지 않는다. 아주 큰 숫자나
                                     정 밀한 소수를 다루어야 할 때만 사용한다.
                                     (default : precision=19, scale=2)


        @Enumerated
            자바 enum 타입을 매핑할 때 사용
            ※ 주의! ORDINAL 사용 X
               → 처음 enum 안에 A, B가 있고 DB 컬럼 값으로는 0, 1로 들어가는데 이후 추가로 C, A, B로
                 C를 enum에 추가하게 된다면 테이블을 drop하고 다시 만들지 않는 이상 기존의 A는 0으로 잡혀있고
                 이후 A는 1로, C는 0으로 들어가는 상황이 발생한다.

            • EnumType.ORDINAL(default) : enum 순서를 데이터베이스에 저장,
                                          기본적으로 숫자가 들어가서 숫자타입의 컬럼 생성
            • EnumType.STRING : enum 이름을 데이터베이스에 저장


        @Temporal
            날짜 타입(java.util.Date, java.util.Calendar)을 매핑할 때 사용
            ※ 옛날은 필요했지만 지금은 필요 없음. Java8 이후 LocalDate, LocalDateTime(=TIMESTAMP)이 들어옴
               java.time.LocalDate, java.time.LocalDateTime을 사용할 때는 생략 가능 (최신 하이버네이트 지원)
               LocalDate 연월, LocalDateTime 연월일

            • TemporalType.DATE: 날짜, 데이터베이스 date 타입과 매핑
              (예: 2013–10–11)
            • TemporalType.TIME: 시간, 데이터베이스 time 타입과 매핑
              (예: 11:11:11)
            • TemporalType.TIMESTAMP: 날짜와 시간, 데이터베이스 timestamp 타입과 매핑
              (예: 2013–10–11 11:11:11)


        @Lob
            데이터베이스 BLOB, CLOB 타입과 매핑

            • @Lob에는 지정할 수 있는 속성이 없다.
            • 매핑하는 필드 타입이 문자면 CLOB 매핑, 나머지는 BLOB 매핑
                CLOB: String, char[], java.sql.CLOB
                BLOB: byte[], java.sql. BLOB


        @Transient
            • 필드 매핑X
            • 데이터베이스에 저장X, 조회X
            • 주로 메모리상에서만 임시로 어떤 값을 보관하고 싶을 때 사용

             ex) @Transient
                 private Integer temp;








