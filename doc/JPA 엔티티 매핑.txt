
목차
    1. 객체와 테이블 매핑
    2. 데이터베이스 스키마 자동 생성
    3. 필드와 컬럼 매핑
    4. 기본 키 매핑


엔티티 매핑 소개
    - 객체와 테이블 매핑 : @Entity, @Table
    - 필드와 컬럼 매핑 : @Column
    - 기본 키 매핑 : @Id
    - 연관관계 매핑 : @ManyToOne, @JoinColumn



1. 객체와 테이블 매핑
        @Entity
            @Entity가 붙은 클래스는 JPA가 관리, 엔티티라 한다.
            JPA를 사용해서 테이블과 매핑할 클래스는 @Entity 필수
            • 주의
                - 기본 생성자 필수(파라미터가 없는 public 또는 protected 생성자)
                    JPA를 구현해서 사용되는 라이브러리들이 리플렉션이나 다양한 기술들을 써서 객체를
                    프록시하는 등 여러가지로 기본 생성자를 사용하기 때문에 스펙상 생성하도록 해두었음
                - final 클래스, enum, interface, inner 클래스 사용X
                - 저장할 필드에 final 사용 X

            속성 정리
                name 속성 (별로 중요 X)
                    디폴트 값은 클래스 이름을 그대로 사용
                    JPA에서 사용할 엔티티 이름을 지정
                    사용하면 헷갈리므로 같은 클래스 이름이 없으면 가급적 기본값을 사용

        @Table
            @Table은 엔티티와 매핑할 DB 테이블 지정
                예시) 엔티티 Member와 DB 테이블 MBR과 맵핑
                    @Entity
                    @Table(name = "MBR")
                    public class Member(){}

            속성 정리
                name : 매핑할 테이블 이름 (디폴트 : 엔티티 이름을 사용)
                catalog : 데이터베이스 catalog 매핑
                schema : 데이터베이스 schema 매핑
                uniqueConstraints(DDL) : DDL 생성 시에 유니크 제약 조건 생성



2. 데이터베이스 스키마 자동 생성 ( persistence.xml )
    - DDL을 애플리케이션 실행 시점에 자동 생성
    - 테이블 중심 -> 객체 중심
    - 데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL 생성
    - 이렇게 생성된 DDL은 개발 장비에서만 사용
    - 생성된 DDL은 운영서버에서는 사용하지 않거나, 적절히 다듬은 후 사용

    속성 정리
        hibernate.hbm2ddl.auto 옵션
            create : 기존테이블 삭제 후 다시 생성 (DROP + CREATE)
                예시) <property name="hibernate.hbm2ddl.auto" value="create"/>
            create-drop : create와 같으나 종료시점에 테이블 DROP
            update : 변경분만 반영(운영DB에는 사용하면 안됨)
            validate : 엔티티와 테이블이 정상 매핑되었는지만 확인
            none : 사용하지 않음

































